// Generated by CoffeeScript 1.6.2
(function() {
  var App;

  App = Ember.Application.create();

  App.Router.map(function() {
    return this.resource('locations');
  });

  App.LocationsRoute = Ember.Route.extend({
    model: function() {
      return App.Location.find();
    }
  });

  App.IndexRoute = Ember.Route.extend({
    model: function() {
      return ['red', 'yellow', 'blue'];
    }
  });

  App.ApplicationController = Ember.ObjectController.extend({
    longitude: 0,
    latitude: 0,
    accuracy: 0,
    tempus: 0,
    geo: false,
    status: "",
    init: function() {
      this.set('tempus', moment().format());
      if (navigator.geolocation) {
        console.log('Apparently there is geolocation');
        navigator.geolocation.watchPosition(this.geoLocation.bind(this), this.noGeo.bind(this));
        this.set('geo', true);
      } else {
        console.log('No geolocation - bummer');
        this.set('geo', false);
      }
      this._super();
      return $(document).foundation();
    },
    geoLocation: function(location) {
      console.log(location.coords.latitude);
      this.set('latitude', location.coords.latitude);
      this.set('longitude', location.coords.longitude);
      this.set('accuracy', location.coords.accuracy);
      return console.log('I think I got a position');
    },
    noGeo: function(positionError) {
      console.log('noGeo: Oops!');
      console.log(positionError.message);
      return this.set('status', positionError.message);
    }
  });

  App.LocationsController = Ember.ArrayController.extend({
    needs: ['application'],
    lattyBinding: Ember.Binding.oneWay("controllers.application.latitude"),
    longyBinding: Ember.Binding.oneWay("controllers.application.longitude")
  });

  Ember.Handlebars.helper('distance', function(lat1, lon1, lat2, lon2) {
    var R, a, c, dist, dlat, dlon;

    R = 6371;
    dlat = (lat2 - lat1).toRad();
    dlon = (lon2 - lon1).toRad();
    lat1 = lat1.toRad();
    lat2 = lat2.toRad();
    a = Math.sin(dlat / 2) * Math.sin(dlat / 2) + Math.sin(dlon / 2) * Math.sin(dlon / 2) * Math.cos(lat1) * Math.cos(lat2);
    c = 2 * Math.atan(Math.sqrt(a), Math.sqrt(1 - a));
    return dist = (R * c).toPrecision(3);
  });

  Ember.Handlebars.helper('bearing', function(lat1, lon1, lat2, lon2) {
    var brng, dlon, x, y;

    dlon = (lon2 - lon1).toRad();
    lat1 = lat1.toRad();
    lat2 = lat2.toRad();
    y = Math.sin(dlon) * Math.cos(lat2);
    x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dlon);
    brng = (Math.atan2(y, x).toDeg() + 360) % 360;
    return brng = Math.round(brng);
  });

  Ember.Handlebars.helper('displaynum', function(num) {
    return num.toFixed(5);
  });

  Number.prototype.toRad = function() {
    return this * Math.PI / 180;
  };

  Number.prototype.toDeg = function() {
    return this * 180 / Math.PI;
  };

  App.Store = DS.Store.extend({
    adapter: 'DS.FixtureAdapter'
  });

  App.Location = DS.Model.extend({
    name: DS.attr('string'),
    lat: DS.attr('number'),
    lon: DS.attr('number'),
    seen: DS.attr('date')
  });

  App.Location.FIXTURES = [
    {
      id: 1,
      name: "Alice",
      lat: 52.63001,
      lon: 1.3010,
      seen: 0
    }, {
      id: 2,
      name: "Bob",
      lat: 52.59231,
      lon: 1.2810,
      seen: 0
    }, {
      id: 3,
      name: "Christine",
      lat: 52.6339,
      lon: 1.29002,
      seen: 0
    }
  ];

}).call(this);
